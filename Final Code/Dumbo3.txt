total : 12642
bully : 919
less fruits : 288
less veg : 403
more_sweets : 560
more_drinks : 597
more fastfood : 644


new statistics:
1.	total : 12642

2.	bully : 919

3.	male bully : 570

4.	female bully : 348

5.  bully_less fruits : 63 - 1 , 84 - 2 , 77 - 3

6	bully_less veg : 63 - 1 , 84 - 2 , 77 - 3


get logistic regression test based on features : 
b/f weekdays , weekends , fruits , veg , sweets , drinks , place , fast food , hungry



val parts = Array(0,0,1,1,3,3,0,3,1)
val label = 1.0
val test = LabeledPoint(label, Vectors.dense(parts.map(x => x.toDouble)))
val prediction = model.predict(test.features)
(prediction, label)
scala> (prediction, label)
res8: (Double, Double) = (1.0,1.0)



val parts = Array(0,0,3,3,3,3,0,3,1)
val label = 1.0
val test = LabeledPoint(label, Vectors.dense(parts.map(x => x.toDouble)))
val prediction = model.predict(test.features)
(prediction, label)
scala> (prediction, label)
res9: (Double, Double) = (0.0,1.0)


Some code used in StatistcsCode.txt file : ( repetition code ) 

bully: 
val bully_s = new_data.filter{ line=>
val d = "[\t]+"
val parts = line.split(d)
(parts(250).toInt == 1)
}



based on gender:
val female_gender = bully_s.filter{ line=>
val d = "[\t]+"
val parts = line.split(d)
(parts(13).toInt == 2)
}

val male_gender = bully_s.filter{ line=>
val d = "[\t]+"
val parts = line.split(d)
(parts(13).toInt == 1)
}

val less_fruits = bully_s.filter{ line=>
val d = "[\t]+"
val parts = line.split(d)
(parts(71).toInt == 3)
}



val only_bully = createModel.filter{ line=>
val d = "[ ]+"
val parts = line.split(d)
parts(0).toInt == 1
}

val less_fruits = only_bully.filter { line => 
val d = "[ ]+"
val parts = line.split(d)
parts(3).toInt <= 1
}

val less_veg = only_bully.filter { line => 
val d = "[ ]+"
val parts = line.split(d)
parts(4).toInt <= 1
}


val more_sweets = only_bully.filter { line => 
val d = "[ ]+"
val parts = line.split(d)
parts(5).toInt > 1
}


val more_drinks = only_bully.filter { line => 
val d = "[ ]+"
val parts = line.split(d)
parts(6).toInt > 1
}


val more_fastfood = only_bully.filter { line => 
val d = "[ ]+"
val parts = line.split(d)
parts(8).toInt > 1
}

val more_hungry = only_bully.filter { line => 
val d = "[ ]+"
val parts = line.split(d)
parts(9).toInt <= 2
}


